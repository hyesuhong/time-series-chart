name: AWS EC2 deployment test

on: 
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifact inside workflow
        uses: actions/upload-artifact@v4
        with:
          name: build_artifact
          path: dist
          retention-days: 1
        
  deployment:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Get build artifact
        uses: actions/download-artifact@v4
        with:
          name: build_artifact

      - name: Display downloaded files
        run: ls -R
        
      # - name: Get public ip4
      #   id: ip4
      #   run: |
      #     ip=$(curl -s https://api.ipify.org)
      #     echo "ip4=${ip}" >> "$GITHUB_OUTPUT"
          
      # - name: Create SSH key file
      #   run: |
      #     echo "$SSH_PEM_KEY" >> $HOME/su-test.pem
      #     chmod 400 $HOME/su-test.pem
      #   env:
      #     SSH_PEM_KEY: ${{ secrets.AWS_SSH_KEY }}

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     aws-access-key-id: ${{ secrets.EC2_ACCESS_ID }}
      #     aws-secret-access-key: ${{ secrets.EC2_ACCESS_SECRET_KEY }}
      #     aws-region: ${{ secrets.EC2_REGION }}

      # - name: Add Github Actions IP to Security group
      #   env:
      #     IP: ${{ steps.ip4.outputs.ip4 }}
      #   run: |
      #     aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${IP}/32

      # - name: Connect to EC2 by SSH
      #   run: |
      #     ssh -i $HOME/su-test.pem -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_HOSTNAME} '
      #       whoami
      #     '
      #     whoami
      #   env:
      #     SSH_USER: ${{ secrets.EC2_USER }}
      #     SSH_HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
      
      # - name: Remove Github Actions IP From Security Group
      #   if: always()
      #   env:
      #     IP: ${{ steps.ip4.outputs.ip4 }}
      #   run: |
      #     aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${IP}/32
